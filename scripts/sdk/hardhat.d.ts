/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981__factory>;
    getContractFactory(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(name: "NFT", signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.NFT__factory>;
    getContractFactory(name: "NFT", signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.NFT__factory>;
    getContractFactory(
      name: "DefaultOperatorFilterer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultOperatorFilterer__factory>;
    getContractFactory(
      name: "IOperatorFilterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOperatorFilterRegistry__factory>;
    getContractFactory(
      name: "OperatorFilterer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorFilterer__factory>;
    getContractFactory(
      name: "OperatorFilterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorFilterRegistry__factory>;
    getContractFactory(
      name: "OperatorFilterRegistryErrorsAndEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorFilterRegistryErrorsAndEvents__factory>;
    getContractFactory(
      name: "OwnedRegistrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnedRegistrant__factory>;

    getContractAt(name: "Ownable", address: string, signer?: ethers.Signer): Promise<Contracts.Ownable>;
    getContractAt(name: "Ownable2Step", address: string, signer?: ethers.Signer): Promise<Contracts.Ownable2Step>;
    getContractAt(name: "IERC2981", address: string, signer?: ethers.Signer): Promise<Contracts.IERC2981>;
    getContractAt(name: "ERC2981", address: string, signer?: ethers.Signer): Promise<Contracts.ERC2981>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(name: "ERC721", address: string, signer?: ethers.Signer): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(name: "IERC721Metadata", address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Metadata>;
    getContractAt(name: "IERC721", address: string, signer?: ethers.Signer): Promise<Contracts.IERC721>;
    getContractAt(name: "IERC721Receiver", address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Receiver>;
    getContractAt(name: "ERC165", address: string, signer?: ethers.Signer): Promise<Contracts.ERC165>;
    getContractAt(name: "IERC165", address: string, signer?: ethers.Signer): Promise<Contracts.IERC165>;
    getContractAt(name: "NFT", address: string, signer?: ethers.Signer): Promise<Contracts.NFT>;
    getContractAt(name: "NFT", address: string, signer?: ethers.Signer): Promise<Contracts.NFT>;
    getContractAt(
      name: "DefaultOperatorFilterer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultOperatorFilterer>;
    getContractAt(
      name: "IOperatorFilterRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOperatorFilterRegistry>;
    getContractAt(
      name: "OperatorFilterer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorFilterer>;
    getContractAt(
      name: "OperatorFilterRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorFilterRegistry>;
    getContractAt(
      name: "OperatorFilterRegistryErrorsAndEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorFilterRegistryErrorsAndEvents>;
    getContractAt(name: "OwnedRegistrant", address: string, signer?: ethers.Signer): Promise<Contracts.OwnedRegistrant>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
