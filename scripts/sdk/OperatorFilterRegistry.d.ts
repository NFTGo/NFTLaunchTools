/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OperatorFilterRegistryInterface extends ethers.utils.Interface {
  functions: {
    "codeHashOf(address)": FunctionFragment;
    "copyEntriesOf(address,address)": FunctionFragment;
    "filteredCodeHashAt(address,uint256)": FunctionFragment;
    "filteredCodeHashes(address)": FunctionFragment;
    "filteredOperatorAt(address,uint256)": FunctionFragment;
    "filteredOperators(address)": FunctionFragment;
    "isCodeHashFiltered(address,bytes32)": FunctionFragment;
    "isCodeHashOfFiltered(address,address)": FunctionFragment;
    "isOperatorAllowed(address,address)": FunctionFragment;
    "isOperatorFiltered(address,address)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "register(address)": FunctionFragment;
    "registerAndCopyEntries(address,address)": FunctionFragment;
    "registerAndSubscribe(address,address)": FunctionFragment;
    "subscribe(address,address)": FunctionFragment;
    "subscriberAt(address,uint256)": FunctionFragment;
    "subscribers(address)": FunctionFragment;
    "subscriptionOf(address)": FunctionFragment;
    "unregister(address)": FunctionFragment;
    "unsubscribe(address,bool)": FunctionFragment;
    "updateCodeHash(address,bytes32,bool)": FunctionFragment;
    "updateCodeHashes(address,bytes32[],bool)": FunctionFragment;
    "updateOperator(address,address,bool)": FunctionFragment;
    "updateOperators(address,address[],bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "codeHashOf", values: [string]): string;
  encodeFunctionData(functionFragment: "copyEntriesOf", values: [string, string]): string;
  encodeFunctionData(functionFragment: "filteredCodeHashAt", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "filteredCodeHashes", values: [string]): string;
  encodeFunctionData(functionFragment: "filteredOperatorAt", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "filteredOperators", values: [string]): string;
  encodeFunctionData(functionFragment: "isCodeHashFiltered", values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: "isCodeHashOfFiltered", values: [string, string]): string;
  encodeFunctionData(functionFragment: "isOperatorAllowed", values: [string, string]): string;
  encodeFunctionData(functionFragment: "isOperatorFiltered", values: [string, string]): string;
  encodeFunctionData(functionFragment: "isRegistered", values: [string]): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(functionFragment: "registerAndCopyEntries", values: [string, string]): string;
  encodeFunctionData(functionFragment: "registerAndSubscribe", values: [string, string]): string;
  encodeFunctionData(functionFragment: "subscribe", values: [string, string]): string;
  encodeFunctionData(functionFragment: "subscriberAt", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "subscribers", values: [string]): string;
  encodeFunctionData(functionFragment: "subscriptionOf", values: [string]): string;
  encodeFunctionData(functionFragment: "unregister", values: [string]): string;
  encodeFunctionData(functionFragment: "unsubscribe", values: [string, boolean]): string;
  encodeFunctionData(functionFragment: "updateCodeHash", values: [string, BytesLike, boolean]): string;
  encodeFunctionData(functionFragment: "updateCodeHashes", values: [string, BytesLike[], boolean]): string;
  encodeFunctionData(functionFragment: "updateOperator", values: [string, string, boolean]): string;
  encodeFunctionData(functionFragment: "updateOperators", values: [string, string[], boolean]): string;

  decodeFunctionResult(functionFragment: "codeHashOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copyEntriesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filteredCodeHashAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filteredCodeHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filteredOperatorAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filteredOperators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCodeHashFiltered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCodeHashOfFiltered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperatorAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperatorFiltered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRegistered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerAndCopyEntries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerAndSubscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscriberAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscriptionOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unsubscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateCodeHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateCodeHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateOperators", data: BytesLike): Result;

  events: {
    "CodeHashUpdated(address,bytes32,bool)": EventFragment;
    "CodeHashesUpdated(address,bytes32[],bool)": EventFragment;
    "OperatorUpdated(address,address,bool)": EventFragment;
    "OperatorsUpdated(address,address[],bool)": EventFragment;
    "RegistrationUpdated(address,bool)": EventFragment;
    "SubscriptionUpdated(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CodeHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodeHashesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUpdated"): EventFragment;
}

export type CodeHashUpdatedEvent = TypedEvent<
  [string, string, boolean] & {
    registrant: string;
    codeHash: string;
    filtered: boolean;
  }
>;

export type CodeHashesUpdatedEvent = TypedEvent<
  [string, string[], boolean] & {
    registrant: string;
    codeHashes: string[];
    filtered: boolean;
  }
>;

export type OperatorUpdatedEvent = TypedEvent<
  [string, string, boolean] & {
    registrant: string;
    operator: string;
    filtered: boolean;
  }
>;

export type OperatorsUpdatedEvent = TypedEvent<
  [string, string[], boolean] & {
    registrant: string;
    operators: string[];
    filtered: boolean;
  }
>;

export type RegistrationUpdatedEvent = TypedEvent<[string, boolean] & { registrant: string; registered: boolean }>;

export type SubscriptionUpdatedEvent = TypedEvent<
  [string, string, boolean] & {
    registrant: string;
    subscription: string;
    subscribed: boolean;
  }
>;

export class OperatorFilterRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OperatorFilterRegistryInterface;

  functions: {
    codeHashOf(a: string, overrides?: CallOverrides): Promise<[string]>;

    copyEntriesOf(
      registrant: string,
      registrantToCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    filteredCodeHashAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    filteredCodeHashes(registrant: string, overrides?: CallOverrides): Promise<[string[]]>;

    filteredOperatorAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    filteredOperators(registrant: string, overrides?: CallOverrides): Promise<[string[]]>;

    isCodeHashFiltered(registrant: string, codeHash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isCodeHashOfFiltered(registrant: string, operatorWithCode: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOperatorAllowed(registrant: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOperatorFiltered(registrant: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRegistered(registrant: string, overrides?: CallOverrides): Promise<[boolean]>;

    register(
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndCopyEntries(
      registrant: string,
      registrantToCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndSubscribe(
      registrant: string,
      subscription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      registrant: string,
      newSubscription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriberAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    subscribers(registrant: string, overrides?: CallOverrides): Promise<[string[]]>;

    subscriptionOf(registrant: string, overrides?: CallOverrides): Promise<[string] & { subscription: string }>;

    unregister(
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsubscribe(
      registrant: string,
      copyExistingEntries: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCodeHash(
      registrant: string,
      codeHash: BytesLike,
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCodeHashes(
      registrant: string,
      codeHashes: BytesLike[],
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOperator(
      registrant: string,
      operator: string,
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOperators(
      registrant: string,
      operators: string[],
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  codeHashOf(a: string, overrides?: CallOverrides): Promise<string>;

  copyEntriesOf(
    registrant: string,
    registrantToCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  filteredCodeHashAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  filteredCodeHashes(registrant: string, overrides?: CallOverrides): Promise<string[]>;

  filteredOperatorAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  filteredOperators(registrant: string, overrides?: CallOverrides): Promise<string[]>;

  isCodeHashFiltered(registrant: string, codeHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isCodeHashOfFiltered(registrant: string, operatorWithCode: string, overrides?: CallOverrides): Promise<boolean>;

  isOperatorAllowed(registrant: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isOperatorFiltered(registrant: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isRegistered(registrant: string, overrides?: CallOverrides): Promise<boolean>;

  register(
    registrant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndCopyEntries(
    registrant: string,
    registrantToCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndSubscribe(
    registrant: string,
    subscription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    registrant: string,
    newSubscription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriberAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  subscribers(registrant: string, overrides?: CallOverrides): Promise<string[]>;

  subscriptionOf(registrant: string, overrides?: CallOverrides): Promise<string>;

  unregister(
    registrant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsubscribe(
    registrant: string,
    copyExistingEntries: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCodeHash(
    registrant: string,
    codeHash: BytesLike,
    filtered: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCodeHashes(
    registrant: string,
    codeHashes: BytesLike[],
    filtered: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOperator(
    registrant: string,
    operator: string,
    filtered: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOperators(
    registrant: string,
    operators: string[],
    filtered: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    codeHashOf(a: string, overrides?: CallOverrides): Promise<string>;

    copyEntriesOf(registrant: string, registrantToCopy: string, overrides?: CallOverrides): Promise<void>;

    filteredCodeHashAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    filteredCodeHashes(registrant: string, overrides?: CallOverrides): Promise<string[]>;

    filteredOperatorAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    filteredOperators(registrant: string, overrides?: CallOverrides): Promise<string[]>;

    isCodeHashFiltered(registrant: string, codeHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isCodeHashOfFiltered(registrant: string, operatorWithCode: string, overrides?: CallOverrides): Promise<boolean>;

    isOperatorAllowed(registrant: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isOperatorFiltered(registrant: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isRegistered(registrant: string, overrides?: CallOverrides): Promise<boolean>;

    register(registrant: string, overrides?: CallOverrides): Promise<void>;

    registerAndCopyEntries(registrant: string, registrantToCopy: string, overrides?: CallOverrides): Promise<void>;

    registerAndSubscribe(registrant: string, subscription: string, overrides?: CallOverrides): Promise<void>;

    subscribe(registrant: string, newSubscription: string, overrides?: CallOverrides): Promise<void>;

    subscriberAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    subscribers(registrant: string, overrides?: CallOverrides): Promise<string[]>;

    subscriptionOf(registrant: string, overrides?: CallOverrides): Promise<string>;

    unregister(registrant: string, overrides?: CallOverrides): Promise<void>;

    unsubscribe(registrant: string, copyExistingEntries: boolean, overrides?: CallOverrides): Promise<void>;

    updateCodeHash(
      registrant: string,
      codeHash: BytesLike,
      filtered: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCodeHashes(
      registrant: string,
      codeHashes: BytesLike[],
      filtered: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperator(registrant: string, operator: string, filtered: boolean, overrides?: CallOverrides): Promise<void>;

    updateOperators(
      registrant: string,
      operators: string[],
      filtered: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CodeHashUpdated(address,bytes32,bool)"(
      registrant?: string | null,
      codeHash?: BytesLike | null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string, boolean], { registrant: string; codeHash: string; filtered: boolean }>;

    CodeHashUpdated(
      registrant?: string | null,
      codeHash?: BytesLike | null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string, boolean], { registrant: string; codeHash: string; filtered: boolean }>;

    "CodeHashesUpdated(address,bytes32[],bool)"(
      registrant?: string | null,
      codeHashes?: null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string[], boolean], { registrant: string; codeHashes: string[]; filtered: boolean }>;

    CodeHashesUpdated(
      registrant?: string | null,
      codeHashes?: null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string[], boolean], { registrant: string; codeHashes: string[]; filtered: boolean }>;

    "OperatorUpdated(address,address,bool)"(
      registrant?: string | null,
      operator?: string | null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string, boolean], { registrant: string; operator: string; filtered: boolean }>;

    OperatorUpdated(
      registrant?: string | null,
      operator?: string | null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string, boolean], { registrant: string; operator: string; filtered: boolean }>;

    "OperatorsUpdated(address,address[],bool)"(
      registrant?: string | null,
      operators?: null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string[], boolean], { registrant: string; operators: string[]; filtered: boolean }>;

    OperatorsUpdated(
      registrant?: string | null,
      operators?: null,
      filtered?: boolean | null
    ): TypedEventFilter<[string, string[], boolean], { registrant: string; operators: string[]; filtered: boolean }>;

    "RegistrationUpdated(address,bool)"(
      registrant?: string | null,
      registered?: boolean | null
    ): TypedEventFilter<[string, boolean], { registrant: string; registered: boolean }>;

    RegistrationUpdated(
      registrant?: string | null,
      registered?: boolean | null
    ): TypedEventFilter<[string, boolean], { registrant: string; registered: boolean }>;

    "SubscriptionUpdated(address,address,bool)"(
      registrant?: string | null,
      subscription?: string | null,
      subscribed?: boolean | null
    ): TypedEventFilter<[string, string, boolean], { registrant: string; subscription: string; subscribed: boolean }>;

    SubscriptionUpdated(
      registrant?: string | null,
      subscription?: string | null,
      subscribed?: boolean | null
    ): TypedEventFilter<[string, string, boolean], { registrant: string; subscription: string; subscribed: boolean }>;
  };

  estimateGas: {
    codeHashOf(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    copyEntriesOf(
      registrant: string,
      registrantToCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    filteredCodeHashAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    filteredCodeHashes(registrant: string, overrides?: CallOverrides): Promise<BigNumber>;

    filteredOperatorAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    filteredOperators(registrant: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCodeHashFiltered(registrant: string, codeHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isCodeHashOfFiltered(registrant: string, operatorWithCode: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOperatorAllowed(registrant: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOperatorFiltered(registrant: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(registrant: string, overrides?: CallOverrides): Promise<BigNumber>;

    register(registrant: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    registerAndCopyEntries(
      registrant: string,
      registrantToCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAndSubscribe(
      registrant: string,
      subscription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribe(
      registrant: string,
      newSubscription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriberAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    subscribers(registrant: string, overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionOf(registrant: string, overrides?: CallOverrides): Promise<BigNumber>;

    unregister(registrant: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unsubscribe(
      registrant: string,
      copyExistingEntries: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCodeHash(
      registrant: string,
      codeHash: BytesLike,
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCodeHashes(
      registrant: string,
      codeHashes: BytesLike[],
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOperator(
      registrant: string,
      operator: string,
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOperators(
      registrant: string,
      operators: string[],
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    codeHashOf(a: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    copyEntriesOf(
      registrant: string,
      registrantToCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    filteredCodeHashAt(
      registrant: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filteredCodeHashes(registrant: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filteredOperatorAt(
      registrant: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filteredOperators(registrant: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCodeHashFiltered(
      registrant: string,
      codeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCodeHashOfFiltered(
      registrant: string,
      operatorWithCode: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorAllowed(registrant: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperatorFiltered(registrant: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(registrant: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndCopyEntries(
      registrant: string,
      registrantToCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndSubscribe(
      registrant: string,
      subscription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      registrant: string,
      newSubscription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriberAt(registrant: string, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscribers(registrant: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscriptionOf(registrant: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unregister(
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      registrant: string,
      copyExistingEntries: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCodeHash(
      registrant: string,
      codeHash: BytesLike,
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCodeHashes(
      registrant: string,
      codeHashes: BytesLike[],
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      registrant: string,
      operator: string,
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOperators(
      registrant: string,
      operators: string[],
      filtered: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
